<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"      
 "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="wxw.dao.ServiceDao">

	<!-- 
		关联查询，数据如何封装？
		1.在Service类中增加关联属性，以封装另2张表的关联字段
			==缺点：在实体类上增加了很多关联属性，导致新增修改时混乱；
		2.创建一个Service的子类，专门用来封装关联查询结果，该类只用来查询，新增修改操作还是用Service类
			==优点：数据结构比较直观
			==缺点：需要创建子类ServiceVO
		3.使用Map封装关联查询结果
			==优点：灵活简单，不用创建子类
			==缺点：数据结构不直观
			==注意事项：
				==Map封装数据Oracle会将SQL语句转大写再执行，MyBatis会将结果集中大写字段名存入Map的key中
				==在页面上，循环输出集合中数据时，需要在EL表达式中通过大写的字段名来取值
				==实体类封装数据没有类似问题，是因为类中包含与字段同名属性，MyBatis在调用实体类封装数据时会自动忽略大小写
	 -->
	<select id="findByPage" parameterType="wxw.model.page.Page"
		resultType="hashMap">
		select
			s.*,
			a.idcard_no,
			a.real_name,
			c.name as cost_name,
			c.descr
		from service s
		inner join account a on a.account_id=s.account_id
		inner join cost c on c.cost_id=s.cost_id
		<where>
			<if test="os_username!=null &amp;&amp; os_username.length()>0">
				and s.os_username=#{os_username}
			</if>
			<if test="unix_host!=null &amp;&amp; unix_host.length()>0">
				and s.unix_host=#{unix_host}
			</if>
			<if test="idcard_no!=null &amp;&amp; idcard_no.length()>0">
				and a.idcard_no=#{idcard_no}
			</if>
			<if test='status!=null &amp;&amp; !status.equals("-1")'>
				and s.status=#{status}
			</if>
		</where>
		order by s.service_id
		limit #{begin},#{rowsPerPage}
	</select>
	
	<select id="findRows"
		parameterType="wxw.model.page.Page"
		resultType="int">
		select count(*) 
		from service s
		inner join account a on a.account_id=s.account_id
		inner join cost c on c.cost_id=s.cost_id
		<where>
			<if test="os_username!=null &amp;&amp; os_username.length()>0">
				and s.os_username=#{os_username}
			</if>
			<if test="unix_host!=null &amp;&amp; unix_host.length()>0">
				and s.unix_host=#{unix_host}
			</if>
			<if test="idcard_no!=null &amp;&amp; idcard_no.length()>0">
				and a.idcard_no=#{idcard_no}
			</if>
			<if test='status!=null &amp;&amp; !status.equals("-1")'>
				and s.status=#{status}
			</if>
		</where>
	</select>

	<select id="findById" parameterType="int" resultType="wxw.model.base.ServiceVO">
		select * from service 
		where service_id=#{id}
	</select>

	<update id="updateStatus" parameterType="wxw.model.base.ServiceVO">
		update service set status=#{status},
		<choose>
			<when test="status==0">
				pause_date=null
			</when>
			<when test="status==1">
				pause_date=now()
			</when>
			<otherwise>
				close_date=now()
			</otherwise>
		</choose>
		where service_id=#{service_id}
	</update>	
	
	<update id="updatePauseByAccount" parameterType="int">
		update service 
		set 
			status='1',
			pause_date=now()
		where account_id=#{accountId}
	</update>
	
	<update id="updateDeleteByAccount" parameterType="int">
		update service 
		set 
			status='2',
			close_date=now()
		where account_id=#{accountId}
	</update>
	
	<insert id="save" parameterType="wxw.model.base.ServiceVO">
		insert into service values(
			#{service_id},
			#{account_id,jdbcType=NUMERIC},
			#{unix_host,jdbcType=VARCHAR},
			#{os_username,jdbcType=VARCHAR},
			#{login_passwd,jdbcType=VARCHAR},
			#{status,jdbcType=VARCHAR},
			#{create_date,jdbcType=TIMESTAMP},
			#{pause_date,jdbcType=TIMESTAMP},
			#{close_date,jdbcType=TIMESTAMP},
			#{cost_id,jdbcType=NUMERIC}
		)
	</insert>
	
	<insert id="update" parameterType="wxw.model.base.ServiceVO">
		insert into service_update values(
			null,
			#{service_id,jdbcType=NUMERIC},
			#{unix_host,jdbcType=VARCHAR},
			#{os_username,jdbcType=VARCHAR},
			#{cost_id,jdbcType=NUMERIC},
			#{create_date,jdbcType=TIMESTAMP}
		)
	</insert>
	
</mapper>